import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import db from "../config/db.js";

// ‚öôÔ∏è Clave JWT (deber√≠a venir del .env en producci√≥n)
const JWT_SECRET = process.env.JWT_SECRET || "miclavesupersegura";

// ======================================================
// ‚úÖ REGISTRO DE USUARIO
// ======================================================
export const registerUser = async (req, res) => {
  try {
    console.log("üì© Datos recibidos en /register:", req.body);

    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "Faltan campos obligatorios" });
    }

    // üîç Verificar si el correo ya est√° registrado
    const [existing] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
    if (existing.length > 0) {
      return res.status(400).json({ message: "El usuario ya existe" });
    }

    // üîê Encriptar contrase√±a
    const hashedPassword = await bcrypt.hash(password, 10);

    // üß© Insertar nuevo usuario
    await db.query(
      "INSERT INTO users (name, email, password) VALUES (?, ?, ?)",
      [name, email, hashedPassword]
    );

    // üîë Generar token JWT
    const token = jwt.sign({ email }, JWT_SECRET, { expiresIn: "1d" });

    // ‚úÖ Respuesta exitosa
    return res.status(201).json({
      message: "Usuario registrado con √©xito",
      user: { name, email },
      token,
    });
  } catch (error) {
    console.error("‚ùå Error en registerUser:", error);
    return res.status(500).json({
      message: "Error en el servidor al registrar usuario",
      error: error.message,
    });
  }
};

// ======================================================
// ‚úÖ LOGIN DE USUARIO
// ======================================================
export const loginUser = async (req, res) => {
  try {
    console.log("üîê Intentando iniciar sesi√≥n:", req.body);

    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Faltan campos" });
    }

    // Buscar usuario
    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);

    if (rows.length === 0) {
      return res.status(404).json({ message: "Usuario no encontrado" });
    }

    const user = rows[0];

    // Comparar contrase√±a
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Contrase√±a incorrecta" });
    }

    // Generar token
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
      expiresIn: "1d",
    });

    // ‚úÖ Respuesta
    return res.json({
      message: "Inicio de sesi√≥n exitoso",
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
      },
    });
  } catch (error) {
    console.error("‚ùå Error en loginUser:", error);
    return res.status(500).json({
      message: "Error en el servidor al iniciar sesi√≥n",
      error: error.message,
    });
  }
};

// ======================================================
// ‚úÖ PERFIL DE USUARIO (opcional / protegido)
// ======================================================
export const getProfile = async (req, res) => {
  try {
    console.log("üë§ Obteniendo perfil para usuario:", req.user);

    if (!req.user) {
      return res.status(401).json({ message: "No autorizado" });
    }

    return res.json({
      message: "Perfil de usuario",
      user: req.user,
    });
  } catch (error) {
    console.error("‚ùå Error en getProfile:", error);
    return res.status(500).json({ message: "Error al obtener perfil" });
  }
};

// ======================================================
// ‚úÖ RECUPERACI√ìN DE CONTRASE√ëA (simulada)
// ======================================================
export const recoverPassword = async (req, res) => {
  try {
    const { email } = req.body;

    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
    if (rows.length === 0) {
      return res.status(404).json({ message: "Correo no encontrado" });
    }

    // Simulaci√≥n de env√≠o de correo
    console.log(`üì® Correo de recuperaci√≥n enviado a ${email}`);
    return res.json({
      message: "Correo de recuperaci√≥n enviado (simulado)",
    });
  } catch (error) {
    console.error("‚ùå Error en recoverPassword:", error);
    return res.status(500).json({
      message: "Error al procesar la recuperaci√≥n",
      error: error.message,
    });
  }
};
